---
name: ci

on:
  push:
    branches:
      - develop
      - master
      - performance
      - trusted_channels_master
  pull_request:
    branches:
      - develop
      - master
  release:
    types:
      - published

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest
    env:
      POSTGRES_DSN: postgresql://postgres@127.0.0.1:5432/hermes
      HERMES_DATABASE_URL: postgres://postgres@127.0.0.1:5432/hermes
      RABBIT_DSN: amqp://guest:guest@127.0.0.1:5672/
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: hermes
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
    steps:
      - uses: actions/checkout@v3
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: "."
          security-checks: "vuln"
          vuln-type: library
          ignore-unfixed: true
          exit-code: 0
          severity: UNKNOWN,LOW,MEDIUM
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: "."
          security-checks: "vuln"
          vuln-type: library
          ignore-unfixed: true
          exit-code: 1
          severity: HIGH,CRITICAL
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - uses: actions/checkout@v3
        with:
          repository: "binkhq/hermes"
          ref: "develop"
          ssh-key: ${{ secrets.HERMES_DEPLOY_KEY }}
          path: "hermes"
      - run: pip install pipenv
      - name: Hermes migration
        working-directory: ./hermes
        run: |
          pipenv requirements > requirements.txt
          pip install -r requirements.txt
          python manage.py migrate
          pip uninstall -y -r requirements.txt
      - run: rm -r hermes
      - run: pipenv install --dev --system --deploy --ignore-pipfile
      - run: xenon --no-assert --max-average A --max-modules B --max-absolute B .
      - run: flake8 .
      - run: black --line-length=120 --check .
      - run: isort --check --line-length 120 --profile black .
      - run: pytest --verbose --cov app --cov-report term-missing

  release_dev:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    name: release_dev
    environment: Development
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=date::$(date +'%FT%H%M%SZ')"
        id: date
      - uses: docker/login-action@v1
        with:
          registry: binkcore.azurecr.io
          username: binkcore
          password: ${{ secrets.ACR_BINKCORE_PASSWORD }}
      - uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            binkcore.azurecr.io/${{ github.event.repository.name }}:${{ steps.date.outputs.date }}
            binkcore.azurecr.io/${{ github.event.repository.name }}:latest

  release_performance:
    if: github.ref == 'refs/heads/performance' && github.event_name == 'push'
    name: release_performance
    environment: Performance
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=date::$(date +'%FT%H%M%SZ')"
        id: date
      - uses: docker/login-action@v1
        with:
          registry: binkcore.azurecr.io
          username: binkcore
          password: ${{ secrets.ACR_BINKCORE_PASSWORD }}
      - uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            binkcore.azurecr.io/${{ github.event.repository.name }}:perf-${{ steps.date.outputs.date }}


  release_trusted_channels:
    if: github.ref == 'refs/heads/trusted_channels_master' && github.event_name == 'push'
    name: release_trusted_channels
    environment: Trusted Channels
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=date::$(date +'%FT%H%M%SZ')"
        id: date
      - uses: docker/login-action@v1
        with:
          registry: binkcore.azurecr.io
          username: binkcore
          password: ${{ secrets.ACR_BINKCORE_PASSWORD }}
      - uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            binkcore.azurecr.io/${{ github.event.repository.name }}:tc-${{ steps.date.outputs.date }}


  release_staging:
    if: github.event_name == 'release' && github.event.action == 'published'
    name: release_staging
    environment: Staging
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v2
      - name: tag_check
        run: |
          if ! [[ ${{ github.event.release.tag_name }} =~ [0-9]+.[0-9]+.[0-9]+ ]]; then
            exit 1;
          fi
      - uses: docker/login-action@v1
        with:
          registry: binkcore.azurecr.io
          username: binkcore
          password: ${{ secrets.ACR_BINKCORE_PASSWORD }}
      - uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            binkcore.azurecr.io/${{ github.event.repository.name }}:${{ github.event.release.tag_name }}
            binkcore.azurecr.io/${{ github.event.repository.name }}:staging-${{ github.event.release.tag_name }}
            binkcore.azurecr.io/${{ github.event.repository.name }}:staging

  release_banking:
    if: github.event_name == 'release' && github.event.action == 'published'
    name: release_banking
    environment: Banking
    needs: [release_staging]
    runs-on: ubuntu-latest
    container: ghcr.io/binkhq/tagbot:latest
    steps:
      - run: |-
          tagbot \
            --username binkcore \
            --password ${{ secrets.ACR_BINKCORE_PASSWORD }} \
            --source binkcore.azurecr.io/${{ github.event.repository.name }}:${{ github.event.release.tag_name }} \
            --tag banking-${{ github.event.release.tag_name }}
          tagbot \
            --username binkcore \
            --password ${{ secrets.ACR_BINKCORE_PASSWORD }} \
            --source binkcore.azurecr.io/${{ github.event.repository.name }}:${{ github.event.release.tag_name }} \
            --tag banking

  release_retail:
    if: github.event_name == 'release' && github.event.action == 'published'
    name: release_retail
    environment: Retail
    needs: [release_staging]
    runs-on: ubuntu-latest
    container: ghcr.io/binkhq/tagbot:latest
    steps:
      - run: |-
          tagbot \
            --username binkcore \
            --password ${{ secrets.ACR_BINKCORE_PASSWORD }} \
            --source binkcore.azurecr.io/${{ github.event.repository.name }}:${{ github.event.release.tag_name }} \
            --tag retail-${{ github.event.release.tag_name }}
          tagbot \
            --username binkcore \
            --password ${{ secrets.ACR_BINKCORE_PASSWORD }} \
            --source binkcore.azurecr.io/${{ github.event.repository.name }}:${{ github.event.release.tag_name }} \
            --tag retail

  release_production:
    if: github.event_name == 'release' && github.event.action == 'published'
    name: release_production
    environment: Production
    needs: [release_staging]
    runs-on: ubuntu-latest
    container: ghcr.io/binkhq/tagbot:latest
    steps:
      - run: |-
          tagbot \
            --username binkcore \
            --password ${{ secrets.ACR_BINKCORE_PASSWORD }} \
            --source binkcore.azurecr.io/${{ github.event.repository.name }}:${{ github.event.release.tag_name }} \
            --tag prod-${{ github.event.release.tag_name }}
          tagbot \
            --username binkcore \
            --password ${{ secrets.ACR_BINKCORE_PASSWORD }} \
            --source binkcore.azurecr.io/${{ github.event.repository.name }}:${{ github.event.release.tag_name }} \
            --tag prod
